import React, { useState, useEffect } from 'react';
import './CalculateMera.css';
import calculateMera from '../utils/calculateMera';

const CalculateMera = ({ tubes, patrubki, equipment, wellParams, onBack }) => {
  const [results, setResults] = useState(null);
  const [isCalculating, setIsCalculating] = useState(false);
  const [hasErrors, setHasErrors] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [expandedResults, setExpandedResults] = useState({});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
  const safeParseFloat = (value) => {
    if (typeof value === 'number') return value;
    if (!value) return 0;
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const normalized = String(value).replace(',', '.');
    return parseFloat(normalized) || 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏–∑ —Ç—Ä—É–±—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
  const getTubeLength = (tube) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—è —Å –¥–ª–∏–Ω–æ–π —Ç—Ä—É–±—ã
    const length = tube.length || tube['–î–ª–∏–Ω–Ω–∞ —Ç—Ä—É–±—ã, –º'] || tube['–î–ª–∏–Ω–∞ —Ç—Ä—É–±—ã, –º'] || tube['–¥–ª–∏–Ω–∞'] || tube['–î–ª–∏–Ω–∞ (m)'] || 0;
    return safeParseFloat(length);
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º
  const validateData = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    setHasErrors(false);
    setErrorMessage('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã
    if (!wellParams?.depth) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã.');
      setHasErrors(true);
      return false;
    }
    
    if (!wellParams?.shoeDepth) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–ª—É–±–∏–Ω–∞ –±–∞—à–º–∞–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã.');
      setHasErrors(true);
      return false;
    }
    
    if (!wellParams?.hangerDepth) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–ª—É–±–∏–Ω–∞ –ø–æ–¥–≤–µ—Å–∫–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä—É–±–∞—Ö
    if (!tubes || tubes.length === 0) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä—É–±–∞—Ö. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä—É–±.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ç—Ä—É–±–∫–∞—Ö
    if (!patrubki || patrubki.length === 0) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ç—Ä—É–±–∫–∞—Ö. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ä—É–±–∫–æ–≤.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    if (!equipment || equipment.length === 0) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const firstEquipment = equipment[0];
    const lastEquipment = equipment[equipment.length - 1];
    
    if (!firstEquipment?.name?.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞')) {
      setErrorMessage('–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–≤–µ—Å–∫–æ–π.');
      setHasErrors(true);
      return false;
    }
    
    if (!lastEquipment?.name?.toLowerCase().includes('–±–∞—à–º–∞–∫')) {
      setErrorMessage('–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∞—à–º–∞–∫–æ–º.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É —Ç—Ä—É–± –∏ –ø–∞—Ç—Ä—É–±–∫–æ–≤ –µ—Å—Ç—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –¥–ª–∏–Ω—ã
    const validTubes = tubes.filter(tube => {
      const length = getTubeLength(tube);
      return length > 0;
    });
    
    if (validTubes.length === 0) {
      setErrorMessage('–í—Å–µ —Ç—Ä—É–±—ã –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä—É–±.');
      setHasErrors(true);
      return false;
    }
    
    const validPatrubki = patrubki.filter(pat => {
      const length = getTubeLength(pat);
      return length > 0;
    });
    
    if (validPatrubki.length === 0) {
      setErrorMessage('–í—Å–µ –ø–∞—Ç—Ä—É–±–∫–∏ –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ä—É–±–∫–æ–≤.');
      setHasErrors(true);
      return false;
    }
    
    return true;
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞
  const performCalculation = () => {
    setIsCalculating(true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!validateData()) {
      setIsCalculating(false);
      return;
    }

    try {
      console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –º–µ—Ä—ã:');
      console.log('‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω—ã:', wellParams);
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 5 —Ç—Ä—É–±–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤—ã—Ö —Ç—Ä—É–±:', tubes.slice(0, 5));
      console.log('‚Ä¢ –ü–æ–ª—è —Ç—Ä—É–±:', Object.keys(tubes[0] || {}));
      
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤—ã—Ö 5 –ø–∞—Ç—Ä—É–±–∫–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤—ã—Ö –ø–∞—Ç—Ä—É–±–∫–æ–≤:', patrubki.slice(0, 5));
      console.log('‚Ä¢ –ü–æ–ª—è –ø–∞—Ç—Ä—É–±–∫–æ–≤:', Object.keys(patrubki[0] || {}));
      
      console.log('‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–±:', tubes.length);
      console.log('‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä—É–±–∫–æ–≤:', patrubki.length);
      console.log('‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', equipment);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const processedTubes = tubes.map((tube, index) => ({
        number: tube.number || tube['‚Ññ‚Ññ  –ø/–ø'] || tube.row || tube.id || `–¢-${index + 1}`,
        length: getTubeLength(tube)
      }));
      
      const processedPatrubki = patrubki.map((pat, index) => ({
        number: pat.number || pat['‚Ññ‚Ññ  –ø/–ø'] || '–ü-' + (pat.row || index + 1),
        length: getTubeLength(pat)
      }));
      
      console.log('‚Ä¢ –¢—Ä—É–±—ã —Å –¥–ª–∏–Ω–æ–π > 0:', processedTubes.filter(t => t.length > 0).length);
      console.log('‚Ä¢ –ü–∞—Ç—Ä—É–±–∫–∏ —Å –¥–ª–∏–Ω–æ–π > 0:', processedPatrubki.filter(p => p.length > 0).length);

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ —É—Ç–∏–ª–∏—Ç
      const calculationResults = calculateMera({
        depth: safeParseFloat(wellParams.depth),
        shoeDepth: safeParseFloat(wellParams.shoeDepth),
        hangerDepth: safeParseFloat(wellParams.hangerDepth),
        tubes: tubes,
        patrubki: patrubki,
        equipment: equipment
      });
      
      if (!calculationResults || calculationResults.length === 0) {
        setHasErrors(true);
        setErrorMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
      } else {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (calculationResults[0]) {
          console.log(`‚úÖ –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø–æ–¥–≤–µ—Å–∫–∞) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≥–ª—É–±–∏–Ω–µ ${calculationResults[0].topDepth}`);
        }
        
        setResults(calculationResults);
        console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:", calculationResults);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ:", error);
      setHasErrors(true);
      setErrorMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: ${error.message}`);
    } finally {
      setIsCalculating(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
  const toggleExpanded = (index) => {
    setExpandedResults({
      ...expandedResults,
      [index]: !expandedResults[index]
    });
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    performCalculation();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ä–∞—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–π –≥–ª—É–±–∏–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä—É–±—ã –∏–ª–∏ –ø–∞—Ç—Ä—É–±–∫–∞
  const calculateItemDepth = (result, itemIndex, isPatrubka = false) => {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–∞—à–º–∞–∫–∞ - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
    const isBashmak = result.equipmentName.toLowerCase().includes('–±–∞—à–º–∞–∫');
    
    if (isBashmak) {
      // –î–ª—è –±–∞—à–º–∞–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤–µ—Ä—Ö
      return result.topDepth;
    }
    
    if (isPatrubka) {
      // –î–ª—è –ø–∞—Ç—Ä—É–±–∫–æ–≤: –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Ç.–µ. –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç—Ä—É–±—ã
      // –∏–ª–∏ –æ—Ç –≤–µ—Ä—Ö–∞ –±–∞—à–º–∞–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç —Ç—Ä—É–±
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä—É–±, –±–µ—Ä—ë–º –≤–µ—Ä—Ö –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è 
      if (!result.tubesUsed || result.tubesUsed.length === 0) {
        return result.topDepth;
      }
      
      // –ò–Ω–∞—á–µ –±–µ—Ä—ë–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –≥–ª—É–±–∏–Ω—É –ø–µ—Ä–≤–æ–π —Ç—Ä—É–±—ã
      let initialDepth = result.tubesUsed[0].startDepth || result.bottomDepth;
      
      // –í—ã—á–∏—Ç–∞–µ–º –¥–ª–∏–Ω—ã –≤—Å–µ—Ö —Ç—Ä—É–± (–∏–¥—ë–º –≤–≤–µ—Ä—Ö)
      for (let i = 0; i < result.tubesUsed.length; i++) {
        initialDepth -= result.tubesUsed[i].length;
      }
      
      // –¢–µ–ø–µ—Ä—å –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –≤–µ—Ä—Ö–Ω–µ–π —Ç–æ—á–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä—É–±—ã
      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ä—É–±–∫–∞ –≤—ã—á–∏—Ç–∞–µ–º –µ–≥–æ –¥–ª–∏–Ω—É (–∏–¥—ë–º –¥–∞–ª—å—à–µ –≤–≤–µ—Ä—Ö)
      for (let i = 0; i < itemIndex; i++) {
        initialDepth -= result.patrubkiUsed[i].length;
      }
      
      return initialDepth;
    } else {
      // –î–ª—è —Ç—Ä—É–±: –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º –æ—Ç —Ç–æ—á–∫–∏, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ (startDepth)
      // –ï—Å–ª–∏ –µ—Å—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      
      if (result.tubesUsed[itemIndex].startDepth) {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–ª—è —Ç—Ä—É–±—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        return result.tubesUsed[itemIndex].startDepth;
      }
      
      // –ò–Ω–∞—á–µ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä—É–±
      let depth = result.bottomDepth; // –ù–∞—á–∞–ª–æ –æ—Ç –Ω–∏–∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      
      for (let i = 0; i < itemIndex; i++) {
        depth -= result.tubesUsed[i].length; // –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –≤–≤–µ—Ä—Ö
      }
      
      return depth;
    }
  };

  return (
    <div className="calculate-mera">
      <div className="calculate-header">
        <h2>–†–∞—Å—á–µ—Ç –º–µ—Ä—ã —Å–ø—É—Å–∫–∞</h2>
        <button onClick={onBack} className="back-button">
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        </button>
      </div>
      
      <div className="summary-section">
        <h3>–°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</h3>
        <div className="summary-table">
          <div className="summary-item">
            <span>–ì–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã:</span> 
            <span>{wellParams?.depth || '‚Äî'} –º</span>
          </div>
          <div className="summary-item">
            <span>–ì–ª—É–±–∏–Ω–∞ –±–∞—à–º–∞–∫–∞:</span> 
            <span>{wellParams?.shoeDepth || '‚Äî'} –º</span>
          </div>
          <div className="summary-item">
            <span>–ì–ª—É–±–∏–Ω–∞ –ø–æ–¥–≤–µ—Å–∫–∏:</span> 
            <span>{wellParams?.hangerDepth || '‚Äî'} –º</span>
          </div>
          <div className="summary-item">
            <span>–¢—Ä—É–±:</span> 
            <span>{tubes?.length || 0} —à—Ç.</span>
          </div>
          <div className="summary-item">
            <span>–ü–∞—Ç—Ä—É–±–∫–æ–≤:</span> 
            <span>{patrubki?.length || 0} —à—Ç.</span>
          </div>
          <div className="summary-item">
            <span>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</span> 
            <span>{equipment?.length || 0} —à—Ç.</span>
          </div>
        </div>
      </div>

      {hasErrors && (
        <div className="error-message">
          <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞</h3>
          <p>{errorMessage}</p>
        </div>
      )}

      <button 
        onClick={performCalculation} 
        className="calculate-button"
        disabled={isCalculating}
      >
        {isCalculating ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç...' : '–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å'}
      </button>

      {results && (
        <div className="results">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</h3>
          <table>
            <thead>
              <tr>
                <th>‚Ññ</th>
                <th>–≠–ª–µ–º–µ–Ω—Ç</th>
                <th>–î–ª–∏–Ω–∞, –º</th>
                <th>–ì–ª—É–±–∏–Ω–∞ –≤–µ—Ä—Ö–∞, –º</th>
                <th>–ì–ª—É–±–∏–Ω–∞ –Ω–∏–∑–∞, –º</th>
                <th>–ü–ª–∞–Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –º</th>
                <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</th>
              </tr>
            </thead>
            <tbody>
              {results.map((result, index) => {
                // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
                const plannedInterval = equipment.find(eq => eq.name === result.equipmentName)?.interval || '-';
                const plannedTolerance = equipment.find(eq => eq.name === result.equipmentName)?.tolerance || 0;
                const eqLength = equipment.find(eq => eq.name === result.equipmentName)?.length || 0;
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ç—Ä—É–±—ã –∏–ª–∏ –ø–∞—Ç—Ä—É–±–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const hasTubes = result.tubesUsed && result.tubesUsed.length > 0;
                const hasPatrubki = result.patrubkiUsed && result.patrubkiUsed.length > 0;
                const isExpandable = hasTubes || hasPatrubki;
                
                return (
                  <>
                    {/* –°—Ç—Ä–æ–∫–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º */}
                    <tr 
                      key={`eq-${index}`} 
                      className={`equipment-row ${result.note.includes('–û—à–∏–±–∫–∞') || result.note.includes('–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞') || result.note.includes('–ü—Ä–µ–≤—ã—à–µ–Ω') ? 'error-row' : ''}`}
                    >
                      <td>{index + 1}</td>
                      <td>
                        <div className="equipment-name">
                          {result.equipmentName}
                          {isExpandable && (
                            <button 
                              className="expand-button"
                              onClick={() => toggleExpanded(index)}
                            >
                              {expandedResults[index] ? '‚ñº' : '‚ñ∂'}
                            </button>
                          )}
                        </div>
                      </td>
                      <td>{safeParseFloat(eqLength).toFixed(2)}</td>
                      <td>{result.topDepth.toFixed(2)}</td>
                      <td>{result.bottomDepth.toFixed(2)}</td>
                      <td>{plannedInterval} ¬± {plannedTolerance}</td>
                      <td className={result.note.includes('–û—à–∏–±–∫–∞') || result.note.includes('–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞') || result.note.includes('–ü—Ä–µ–≤—ã—à–µ–Ω') ? 'error-note' : ''}>{result.note}</td>
                    </tr>
                    
                    {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä—É–±—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –µ—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ */}
                    {expandedResults[index] && hasTubes && result.tubesUsed.map((tube, tubeIndex) => {
                      // –î–ª—è —Ç—Ä—É–± –≤–µ—Ä—Ö–Ω—è—è –≥–ª—É–±–∏–Ω–∞ - —ç—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞—è –≥–ª—É–±–∏–Ω–∞, –∞ –Ω–∏–∂–Ω—è—è - –≤–µ—Ä—Ö–Ω—è—è + –¥–ª–∏–Ω–∞
                      const tubeStartDepth = tube.startDepth || calculateItemDepth(result, tubeIndex);
                      const tubeTopDepth = tubeStartDepth; // –í–µ—Ä—Ö —Ç—Ä—É–±—ã
                      const tubeBottomDepth = tubeTopDepth + tube.length; // –ù–∏–∑ —Ç—Ä—É–±—ã (–≥–ª—É–±–∂–µ)
                      const tubeNumber = tube.sequentialNumber || tubeIndex + 1;
                      
                      return (
                        <tr key={`tube-${index}-${tubeIndex}`} className="tube-row">
                          <td></td>
                          <td className="item-name">–¢—Ä—É–±–∞ ‚Ññ{tubeNumber}</td>
                          <td>{tube.length.toFixed(2)}</td>
                          <td>{tubeTopDepth.toFixed(2)}</td>
                          <td>{tubeBottomDepth.toFixed(2)}</td>
                          <td>-</td>
                          <td></td>
                        </tr>
                      );
                    })}
                    
                    {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–∞—Ç—Ä—É–±–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –µ—Å–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ */}
                    {expandedResults[index] && hasPatrubki && result.patrubkiUsed.map((pat, patIndex) => {
                      // –î–ª—è –ø–∞—Ç—Ä—É–±–∫–æ–≤ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –≤–µ—Ä—Ö–Ω–µ–π —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä—É–±—ã
                      let patStartDepth;
                      
                      if (result.tubesUsed && result.tubesUsed.length > 0) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä—É–±—ã, –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–Ω–µ–π —Ç–æ—á–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä—É–±—ã
                        const lastTube = result.tubesUsed[result.tubesUsed.length - 1];
                        const lastTubeStartDepth = lastTube.startDepth || calculateItemDepth(result, result.tubesUsed.length - 1);
                        patStartDepth = lastTubeStartDepth;
                      } else {
                        // –ï—Å–ª–∏ —Ç—Ä—É–± –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                        patStartDepth = result.topDepth;
                      }
                      
                      // –¢–µ–ø–µ—Ä—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞—Ç—Ä—É–±–∫–∞ –≤—ã—á–∏—Ç–∞–µ–º –µ–≥–æ –¥–ª–∏–Ω—É (–∏–¥—ë–º –≤–≤–µ—Ä—Ö)
                      for (let i = 0; i < patIndex; i++) {
                        patStartDepth -= result.patrubkiUsed[i].length;
                      }
                      
                      const patTopDepth = patStartDepth;
                      const patBottomDepth = patTopDepth + pat.length;
                      
                      return (
                        <tr key={`pat-${index}-${patIndex}`} className="patrubka-row">
                          <td></td>
                          <td className="item-name">–ü–∞—Ç—Ä—É–±–æ–∫ ‚Ññ{pat.number}</td>
                          <td>{pat.length.toFixed(2)}</td>
                          <td>{patTopDepth.toFixed(2)}</td>
                          <td>{patBottomDepth.toFixed(2)}</td>
                          <td>-</td>
                          <td></td>
                        </tr>
                      );
                    })}
                  </>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default CalculateMera; 