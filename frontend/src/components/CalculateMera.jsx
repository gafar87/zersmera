import React, { useState, useEffect } from 'react';
import './CalculateMera.css';
import calculateMera from '../utils/calculateMera';

const CalculateMera = ({ tubes, patrubki, equipment, wellParams, onBack }) => {
  const [results, setResults] = useState(null);
  const [isCalculating, setIsCalculating] = useState(false);
  const [hasErrors, setHasErrors] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [savedData, setSavedData] = useState(null);
  const [showTubesBetweenElements, setShowTubesBetweenElements] = useState({});

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const savedCalculation = localStorage.getItem('calculationData');
    if (savedCalculation) {
      try {
        const parsedData = JSON.parse(savedCalculation);
        setSavedData(parsedData);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞:', parsedData);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      }
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  const handleClearStorage = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      try {
        console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–∑ CalculateMera...');
        
        // –Ø–≤–Ω–æ –ø–µ—Ä–µ—á–∏—Å–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        const keysToRemove = [
          'calculationData',
          'tubeUploader',
          'wellParams',
          'tubeData',
          'patrubkiData',
          'equipmentData'
        ];
        
        // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å 
        keysToRemove.forEach(key => {
          const value = localStorage.getItem(key);
          console.log(`–£–¥–∞–ª—è–µ–º –∫–ª—é—á ${key}, —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${value ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`);
          localStorage.removeItem(key);
          console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è ${key}: ${localStorage.getItem(key) ? '–æ—Å—Ç–∞–ª–æ—Å—å' : '—É–¥–∞–ª–µ–Ω–æ'}`);
        });
        
        // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        console.log('–û—á–∏—â–∞–µ–º –≤—Å—ë —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...');
        localStorage.clear();
        
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:');
        keysToRemove.forEach(key => {
          console.log(`${key}: ${localStorage.getItem(key) ? '–æ—Å—Ç–∞–ª–æ—Å—å' : '—É–¥–∞–ª–µ–Ω–æ'}`);
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        setResults(null);
        setSavedData(null);
        setHasErrors(false);
        setErrorMessage(null);
        setShowTubesBetweenElements(false);
        
        alert('–õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—á–∏—â–µ–Ω–æ. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π JavaScript –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        console.log('üí• –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        
        // –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
          window.location.href = window.location.href.split('?')[0] + '?nocache=' + new Date().getTime();
        }, 300);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error);
        alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ' + error.message);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
  const safeParseFloat = (value) => {
    if (typeof value === 'number') return value;
    if (!value) return 0;
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const normalized = String(value).replace(',', '.');
    return parseFloat(normalized) || 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏–∑ —Ç—Ä—É–±—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
  const getTubeLength = (tube) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—è —Å –¥–ª–∏–Ω–æ–π —Ç—Ä—É–±—ã
    const length = tube.length || tube['–î–ª–∏–Ω–Ω–∞ —Ç—Ä—É–±—ã, –º'] || tube['–î–ª–∏–Ω–∞ —Ç—Ä—É–±—ã, –º'] || tube['–¥–ª–∏–Ω–∞'] || tube['–î–ª–∏–Ω–∞ (m)'] || 0;
    return safeParseFloat(length);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ç—Ä—É–± –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
  const toggleTubesBetween = (equipmentId) => {
    setShowTubesBetweenElements(prev => ({
      ...prev,
      [equipmentId]: !prev[equipmentId]
    }));
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º
  const validateData = () => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–ø—Å–æ–≤ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const actualTubes = tubes || (savedData?.tubes?.data) || [];
    const actualPatrubki = patrubki || (savedData?.patrubki?.data) || [];
    const actualEquipment = equipment || savedData?.equipment || [];
    const actualWellParams = wellParams || savedData?.wellParams || {};
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏
    setHasErrors(false);
    setErrorMessage('');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã
    if (!actualWellParams?.depth) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–≤–∞–∂–∏–Ω—ã.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä—É–±–∞—Ö
    if (!actualTubes || actualTubes.length === 0) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä—É–±–∞—Ö. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä—É–±.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞—Ç—Ä—É–±–∫–∞—Ö
    if (!actualPatrubki || actualPatrubki.length === 0) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–∞—Ç—Ä—É–±–∫–∞—Ö. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ä—É–±–∫–æ–≤.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
    if (!actualEquipment || actualEquipment.length === 0) {
      setErrorMessage('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const firstEquipment = actualEquipment[0];
    const lastEquipment = actualEquipment[actualEquipment.length - 1];
    
    if (!firstEquipment?.name?.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞')) {
      setErrorMessage('–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–≤–µ—Å–∫–æ–π.');
      setHasErrors(true);
      return false;
    }
    
    if (!lastEquipment?.name?.toLowerCase().includes('–±–∞—à–º–∞–∫')) {
      setErrorMessage('–ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∞—à–º–∞–∫–æ–º.');
      setHasErrors(true);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —É —Ç—Ä—É–± –∏ –ø–∞—Ç—Ä—É–±–∫–æ–≤ –µ—Å—Ç—å –Ω–µ–Ω—É–ª–µ–≤—ã–µ –¥–ª–∏–Ω—ã
    const validTubes = actualTubes.filter(tube => {
      const length = getTubeLength(tube);
      return length > 0;
    });
    
    if (validTubes.length === 0) {
      setErrorMessage('–í—Å–µ —Ç—Ä—É–±—ã –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä—É–±.');
      setHasErrors(true);
      return false;
    }
    
    const validPatrubki = actualPatrubki.filter(pat => {
      const length = getTubeLength(pat);
      return length > 0;
    });
    
    if (validPatrubki.length === 0) {
      setErrorMessage('–í—Å–µ –ø–∞—Ç—Ä—É–±–∫–∏ –∏–º–µ—é—Ç –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ä—É–±–∫–æ–≤.');
      setHasErrors(true);
      return false;
    }
    
    return true;
  };

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞
  const performCalculation = () => {
    setIsCalculating(true);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    const actualTubes = tubes || (savedData?.tubes?.data) || [];
    const actualPatrubki = patrubki || (savedData?.patrubki?.data) || [];
    const actualEquipment = equipment || savedData?.equipment || [];
    const actualWellParams = wellParams || savedData?.wellParams || {};
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (!validateData()) {
      setIsCalculating(false);
      return;
    }

    try {
      console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –º–µ—Ä—ã:');
      console.log('‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–≤–∞–∂–∏–Ω—ã:', actualWellParams);
      console.log('‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–±:', actualTubes.length);
      console.log('‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä—É–±–∫–æ–≤:', actualPatrubki.length);
      console.log('‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:', actualEquipment);

      // –ö–æ–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä—É–±—ã –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
      const sortedTubes = [...actualTubes].sort((a, b) => {
        return getTubeLength(b) - getTubeLength(a);
      });

      // –ö–æ–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ä—É–±–∫–∏ –ø–æ –¥–ª–∏–Ω–µ (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
      const sortedPatrubki = [...actualPatrubki].sort((a, b) => {
        return getTubeLength(b) - getTubeLength(a);
      });

      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
      const calculationResults = [];
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –±–∞—à–º–∞–∫ –≤ –∫–æ–Ω—Ü–µ (–≥–ª—É–±–∂–µ –≤—Å–µ–≥–æ), –ø–æ–¥–≤–µ—Å–∫–∞ –≤ –Ω–∞—á–∞–ª–µ (–±–ª–∏–∂–µ –∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏)
      const sortedEquipment = [...actualEquipment].sort((a, b) => {
        // –ë–∞—à–º–∞–∫ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
        if (a.name.toLowerCase().includes('–±–∞—à–º–∞–∫')) return 1;
        if (b.name.toLowerCase().includes('–±–∞—à–º–∞–∫')) return -1;
        // –ü–æ–¥–≤–µ—Å–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è
        if (a.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞')) return -1;
        if (b.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞')) return 1;
        // –ü–æ –≥–ª—É–±–∏–Ω–µ (–æ—Ç –º–µ–Ω—å—à–µ–π –∫ –±–æ–ª—å—à–µ–π)
        return safeParseFloat(a.depth) - safeParseFloat(b.depth);
      });
      
      const totalDepth = safeParseFloat(actualWellParams.depth);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –ø–æ—Ä—è–¥–∫–∞ –∏ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–ª—É–±–∏–Ω
      for (let i = 0; i < sortedEquipment.length; i++) {
        const eq = sortedEquipment[i];
        const isBashmak = eq.name.toLowerCase().includes('–±–∞—à–º–∞–∫');
        const isHanger = eq.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞');
        
        let topDepth;
        
        if (eq.depth) {
          topDepth = safeParseFloat(eq.depth);
        } else if (isBashmak) {
          topDepth = totalDepth - safeParseFloat(eq.length);
        } else if (isHanger) {
          topDepth = 0;
        } else {
          const hangerDepth = sortedEquipment.find(e => e.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞'))?.depth || 0;
          const bashmakDepth = sortedEquipment.find(e => e.name.toLowerCase().includes('–±–∞—à–º–∞–∫'))?.depth || totalDepth;
          const eqIndex = sortedEquipment.indexOf(eq);
          const hangerIndex = sortedEquipment.findIndex(e => e.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞'));
          const bashmakIndex = sortedEquipment.findIndex(e => e.name.toLowerCase().includes('–±–∞—à–º–∞–∫'));
          
          if (hangerIndex !== -1 && bashmakIndex !== -1) {
            const totalElements = sortedEquipment.length - 2;
            const depthRange = bashmakDepth - hangerDepth;
            const step = depthRange / (totalElements + 1);
            const positionFromTop = eqIndex - hangerIndex - 1;
            topDepth = hangerDepth + step * positionFromTop;
          } else {
            topDepth = 0;
          }
        }
        
        // –†–∞—Å—á–µ—Ç –Ω–∏–∂–Ω–µ–π –≥–ª—É–±–∏–Ω—ã (—Ç–æ–ø + –¥–ª–∏–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
        const length = safeParseFloat(eq.length);
        const bottomDepth = topDepth + length;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω–æ–≤—É—é –≥–ª—É–±–∏–Ω—É –∏ –¥–æ–ø—É—Å–∫
        const plannedDepth = safeParseFloat(eq.plannedDepth || eq.interval || 0);
        const tolerance = safeParseFloat(eq.tolerance || 0);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∏–µ–º–ª–µ–º–æ–π –≥–ª—É–±–∏–Ω—ã
        const minDepth = plannedDepth > 0 ? plannedDepth - tolerance : null;
        const maxDepth = plannedDepth > 0 ? plannedDepth + tolerance : null;
        
        let note = "";
        if (plannedDepth > 0 && tolerance > 0) {
          if (bottomDepth < minDepth) {
            note = `–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª–µ–≤–∞—è –≥–ª—É–±–∏–Ω–∞ (${bottomDepth.toFixed(2)} < ${minDepth.toFixed(2)})`;
          } else if (bottomDepth > maxDepth) {
            note = `–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –≥–ª—É–±–∏–Ω–∞ (${bottomDepth.toFixed(2)} > ${maxDepth.toFixed(2)})`;
      } else {
            note = `–í –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞ (${minDepth.toFixed(2)} - ${maxDepth.toFixed(2)})`;
          }
        }
        
        if (bottomDepth > totalDepth) {
          note = `–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã (${bottomDepth.toFixed(2)} > ${totalDepth})`;
        }
        
        // –†–∞—Å—á–µ—Ç —Ç—Ä—É–± –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        const tubesUsed = [];
        const patrubkiUsed = [];
        
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä—É–±—ã –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º
        if (i > 0) {
          const prevEq = calculationResults[i - 1];
          const distanceBetween = topDepth - prevEq.bottomDepth;
          
          // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä—É–±–∞–º–∏
          let remainingDistance = distanceBetween;
          let tubeIndex = 0;
          
          while (remainingDistance > 0 && tubeIndex < sortedTubes.length) {
            const tube = sortedTubes[tubeIndex];
            const tubeLength = getTubeLength(tube);
            
            if (tubeLength <= remainingDistance) {
              const tubeCopy = { ...tube, length: tubeLength };
              tubesUsed.push(tubeCopy);
              remainingDistance -= tubeLength;
            }
            
            tubeIndex++;
          }
          
          // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–∞—Ç—Ä—É–±–∫–∞–º–∏
          tubeIndex = 0;
          while (remainingDistance > 0 && tubeIndex < sortedPatrubki.length) {
            const patrubka = sortedPatrubki[tubeIndex];
            const patrubkaLength = getTubeLength(patrubka);
            
            if (patrubkaLength <= remainingDistance) {
              const patrubkaCopy = { ...patrubka, length: patrubkaLength };
              patrubkiUsed.push(patrubkaCopy);
              remainingDistance -= patrubkaLength;
            }
            
            tubeIndex++;
          }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        calculationResults.push({
          equipmentName: eq.name,
          topDepth: topDepth,
          bottomDepth: bottomDepth,
          tubesUsed: tubesUsed,
          patrubkiUsed: patrubkiUsed,
          note: note,
          plannedDepth: plannedDepth,
          tolerance: tolerance,
          minDepth: minDepth,
          maxDepth: maxDepth,
          equipmentId: eq.id || i + 1
        });
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –≤ localStorage
      const dataToSave = {
        tubes: { data: actualTubes },
        patrubki: { data: actualPatrubki },
        equipment: actualEquipment,
        wellParams: actualWellParams,
        calculationResults: calculationResults
      };
      
      localStorage.setItem('calculationData', JSON.stringify(dataToSave));
      console.log('üíæ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      setResults(calculationResults);
      console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞:", calculationResults);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ:", error);
      setHasErrors(true);
      setErrorMessage(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: ${error.message}`);
    } finally {
      setIsCalculating(false);
    }
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    performCalculation();
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ä–∞—Å—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  return (
    <div className="calculate-mera">
      <div className="calculate-header">
        <h2>–†–∞—Å—á–µ—Ç –º–µ—Ä—ã —Å–ø—É—Å–∫–∞</h2>
        <div className="header-buttons">
        <button onClick={onBack} className="back-button">
          ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
        </button>
          <button onClick={handleClearStorage} className="clear-storage-button">
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
          </button>
        </div>
      </div>
      
      <div className="summary-section">
        <h3>–°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</h3>
        <div className="summary-table">
          <div className="summary-item">
            <span>–ì–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã:</span> 
            <span>{(wellParams || savedData?.wellParams)?.depth || '‚Äî'} –º</span>
          </div>
          <div className="summary-item">
            <span>–¢—Ä—É–±:</span> 
            <span>{(tubes || savedData?.tubes?.data || []).length || 0} —à—Ç.</span>
          </div>
          <div className="summary-item">
            <span>–ü–∞—Ç—Ä—É–±–∫–æ–≤:</span> 
            <span>{(patrubki || savedData?.patrubki?.data || []).length || 0} —à—Ç.</span>
          </div>
          <div className="summary-item">
            <span>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:</span> 
            <span>{(equipment || savedData?.equipment || []).length || 0} —à—Ç.</span>
          </div>
        </div>
      </div>

      {hasErrors && (
        <div className="error-message">
          <h3>‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞</h3>
          <p>{errorMessage}</p>
        </div>
      )}

      <button 
        onClick={performCalculation} 
        className="calculate-button"
        disabled={isCalculating}
      >
        {isCalculating ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—á–µ—Ç...' : '–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å'}
      </button>

      {results && (
        <div className="results">
          <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</h3>
          <table>
            <thead>
              <tr>
                <th>‚Ññ</th>
                <th>–≠–ª–µ–º–µ–Ω—Ç</th>
                <th>–î–ª–∏–Ω–∞, –º</th>
                <th>–ì–ª—É–±–∏–Ω–∞ –≤–µ—Ä—Ö–∞, –º</th>
                <th>–ì–ª—É–±–∏–Ω–∞ –Ω–∏–∑–∞, –º</th>
                <th>–ü–ª–∞–Ω–æ–≤–∞—è –≥–ª—É–±–∏–Ω–∞, –º</th>
                <th>–î–æ–ø—É—Å–∫ ¬±, –º</th>
                <th>–ò–Ω—Ç–µ—Ä–≤–∞–ª</th>
                <th>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</th>
                <th>–¢—Ä—É–±—ã</th>
              </tr>
            </thead>
            <tbody>
              {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –æ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ (—Å–≤–µ—Ä—Ö—É) –∫ –¥–Ω—É (—Å–Ω–∏–∑—É) */}
              {results.map((result, index) => {
                const actualEquipment = equipment || savedData?.equipment || [];
                const eqData = actualEquipment.find(eq => eq.name === result.equipmentName) || {};
                const eqLength = safeParseFloat(eqData.length || 0);
                const hasTubes = result.tubesUsed.length > 0 || result.patrubkiUsed.length > 0;
                
                return (
                  <React.Fragment key={`eq-${index}`}>
                    <tr className="equipment-row">
                      <td>{index + 1}</td>
                      <td>{result.equipmentName}</td>
                      <td>{eqLength.toFixed(2)}</td>
                      <td>{result.topDepth.toFixed(2)}</td>
                      <td>{result.bottomDepth.toFixed(2)}</td>
                      <td>{result.plannedDepth || '-'}</td>
                      <td>{result.tolerance || '-'}</td>
                      <td>
                        {result.minDepth && result.maxDepth 
                          ? `${result.minDepth.toFixed(2)} - ${result.maxDepth.toFixed(2)}` 
                          : '-'}
                      </td>
                      <td>{result.note}</td>
                      <td>
                        {hasTubes && (
                            <button 
                            onClick={() => toggleTubesBetween(result.equipmentId)}
                            className="show-tubes-button"
                            >
                            {showTubesBetweenElements[result.equipmentId] ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}
                            </button>
                          )}
                      </td>
                    </tr>
                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä—É–±—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –∏ –µ—Å–ª–∏ –≤–∏–¥–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ */}
                    {hasTubes && showTubesBetweenElements[result.equipmentId] && (
                      <>
                        {result.tubesUsed.map((tube, tubeIdx) => (
                          <tr key={`tube-${index}-${tubeIdx}`} className="tube-row">
                            <td colSpan="2" className="pl-8">–¢—Ä—É–±–∞ {tube.number || tubeIdx + 1}</td>
                            <td>{getTubeLength(tube).toFixed(2)}</td>
                            <td colSpan="7">{tube.manufacturer || '-'}</td>
                        </tr>
                        ))}
                        {result.patrubkiUsed.map((patrubka, patIdx) => (
                          <tr key={`patrubka-${index}-${patIdx}`} className="patrubka-row">
                            <td colSpan="2" className="pl-8">–ü–∞—Ç—Ä—É–±–æ–∫ {patrubka.number || patIdx + 1}</td>
                            <td>{getTubeLength(patrubka).toFixed(2)}</td>
                            <td colSpan="7">{patrubka.name || '-'}</td>
                        </tr>
                        ))}
                  </>
                    )}
                  </React.Fragment>
                );
              })}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default CalculateMera; 