// src/utils/calculateMera.js

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –º–µ—Ä—ã —Å–ø—É—Å–∫–∞.
 * 
 * @param {Object} params
 * @param {number} params.depth        - –ì–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã (–º–∞–∫—Å–∏–º—É–º)
 * @param {Array}  tubes               - –ú–∞—Å—Å–∏–≤ —Ç—Ä—É–± [{ number, length, row }, ...]
 * @param {Array}  patrubki            - –ú–∞—Å—Å–∏–≤ –ø–∞—Ç—Ä—É–±–∫–æ–≤ [{ number, length, name }, ...]
 * @param {Array}  equipment           - –ú–∞—Å—Å–∏–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è 
 *                                       [{ name, length, plannedDepth, tolerance, depth }, ...]
 * 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç:
 *   - equipmentName       (string)
 *   - tubesUsed           (Array<{ number, length }>)
 *   - patrubkiUsed        (Array<{ number, length }>)
 *   - topDepth            (—á–∏—Å–ª–æ)  - –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
 *   - bottomDepth         (—á–∏—Å–ª–æ)  - –æ—Ç–º–µ—Ç–∫–∞ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ (topDepth + length –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
 *   - note                (string) - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ø–æ–ø–∞–ª–∏ / –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –ø—Ä–µ–≤—ã—à–µ–Ω –∑–∞–±–æ–π –∏ —Ç.–¥.
 */
export default function calculateMera(
  params = {}, 
  tubesParam, 
  patrubkiParam, 
  equipmentParam
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const depth = params.depth || 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–∏ –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
  let tubes = tubesParam || params.tubes || [];
  let patrubki = patrubkiParam || params.patrubki || [];
  let equipment = equipmentParam || params.equipment || [];

  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –º–µ—Ä—ã:');
  console.log('‚Ä¢ –ì–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã:', depth);
  console.log('‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–±:', tubes?.length);
  console.log('‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä—É–±–∫–æ–≤:', patrubki?.length);
  console.log('‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', equipment?.length);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (!tubes || !tubes.length || !equipment || !equipment.length) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return [];
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
  const safeParseFloat = (value) => {
    if (typeof value === 'number') return value;
    if (!value) return 0;
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const normalized = String(value).replace(',', '.');
    return parseFloat(normalized) || 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏–∑ —Ç—Ä—É–±—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
  const getTubeLength = (tube) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—è —Å –¥–ª–∏–Ω–æ–π —Ç—Ä—É–±—ã
    const length = tube.length || tube['–î–ª–∏–Ω–Ω–∞ —Ç—Ä—É–±—ã, –º'] || tube['–î–ª–∏–Ω–∞ —Ç—Ä—É–±—ã, –º'] || tube['–¥–ª–∏–Ω–∞'] || tube['–î–ª–∏–Ω–∞ (m)'] || 0;
    return safeParseFloat(length);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç—Ä—É–±—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
  const getTubeNumber = (tube, index) => {
    return tube.number || tube['‚Ññ‚Ññ  –ø/–ø'] || tube['–ù–æ–º–µ—Ä —Ç—Ä—É–±—ã'] || tube.row || tube.id || `–¢-${index + 1}`;
  };
  
  // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–ª–∏–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã
  let availableTubes = tubes.map((tube, index) => ({
    ...tube,
    number: getTubeNumber(tube, index),
    length: getTubeLength(tube)
  })).filter(tube => tube.length > 0); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç—Ä—É–±—ã —Å –Ω—É–ª–µ–≤–æ–π –¥–ª–∏–Ω–æ–π
  
  let availablePatrubki = [];
  if (patrubki && patrubki.length) {
    availablePatrubki = patrubki.map((pat, index) => ({
    ...pat,
    number: pat.number || pat['‚Ññ‚Ññ  –ø/–ø'] || '–ü-' + (pat.row || index + 1),
    length: getTubeLength(pat)
  })).filter(pat => pat.length > 0); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø–∞—Ç—Ä—É–±–∫–∏ —Å –Ω—É–ª–µ–≤–æ–π –¥–ª–∏–Ω–æ–π
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä—É–±—ã –ø–æ –¥–ª–∏–Ω–µ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
  availableTubes.sort((a, b) => b.length - a.length);

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä—É–±–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  let totalTubesLength = 0;
  availableTubes.forEach(tube => {
    totalTubesLength += tube.length;
  });
  console.log(`üß± –í—Å–µ–≥–æ –¥–ª–∏–Ω–∞ —Ç—Ä—É–±: ${totalTubesLength.toFixed(2)} –º (${availableTubes.length} —à—Ç)`);

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ç—Ä—É–±–∫–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (availablePatrubki.length > 0) {
    let totalPatrubkiLength = 0;
    availablePatrubki.forEach(pat => {
      totalPatrubkiLength += pat.length;
    });
    console.log(`üîß –í—Å–µ–≥–æ –¥–ª–∏–Ω–∞ –ø–∞—Ç—Ä—É–±–∫–æ–≤: ${totalPatrubkiLength.toFixed(2)} –º (${availablePatrubki.length} —à—Ç)`);
  }

  // -------------------------------------------------------------------------
  // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –†–∞—Å—á–µ—Ç –≥–ª—É–±–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  // -------------------------------------------------------------------------
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –ø–æ–¥–≤–µ—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π, –±–∞—à–º–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º
  const sortedEquipment = [...equipment].sort((a, b) => {
    // –ë–∞—à–º–∞–∫ –≤—Å–µ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    if (a.name.toLowerCase().includes('–±–∞—à–º–∞–∫')) return 1;
    if (b.name.toLowerCase().includes('–±–∞—à–º–∞–∫')) return -1;
    // –ü–æ–¥–≤–µ—Å–∫–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–∞—è
    if (a.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞')) return -1;
    if (b.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞')) return 1;
    // –ü–æ –≥–ª—É–±–∏–Ω–µ (–æ—Ç –º–µ–Ω—å—à–µ–π –∫ –±–æ–ª—å—à–µ–π)
    return safeParseFloat(a.depth) - safeParseFloat(b.depth);
  });
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  const results = [];
  
  // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã —Ç—Ä—É–± –∏ –ø–∞—Ç—Ä—É–±–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  let remainingTubes = [...availableTubes];
  let remainingPatrubki = [...availablePatrubki];
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
  for (let i = 0; i < sortedEquipment.length; i++) {
    const eq = sortedEquipment[i];
    const isBashmak = eq.name.toLowerCase().includes('–±–∞—à–º–∞–∫');
    const isHanger = eq.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª—É–±–∏–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–ª—É–±–∏–Ω—ã
    let topDepth;
    
    if (eq.depth) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≥–ª—É–±–∏–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      topDepth = safeParseFloat(eq.depth);
    } else if (isBashmak) {
      // –î–ª—è –±–∞—à–º–∞–∫–∞: –≥–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã –º–∏–Ω—É—Å –¥–ª–∏–Ω–∞ –±–∞—à–º–∞–∫–∞
      topDepth = safeParseFloat(depth) - safeParseFloat(eq.length);
    } else if (isHanger) {
      // –î–ª—è –ø–æ–¥–≤–µ—Å–∫–∏: –Ω–∞—á–∞–ª–æ —Å–∫–≤–∞–∂–∏–Ω—ã
      topDepth = 0;
    } else {
      // –ï—Å–ª–∏ –≥–ª—É–±–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É —Å–æ—Å–µ–¥–Ω–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
      const hangerDepth = sortedEquipment.find(e => e.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞'))?.depth || 0;
      const bashmakDepth = sortedEquipment.find(e => e.name.toLowerCase().includes('–±–∞—à–º–∞–∫'))?.depth || depth;
      const eqIndex = sortedEquipment.indexOf(eq);
      const hangerIndex = sortedEquipment.findIndex(e => e.name.toLowerCase().includes('–ø–æ–¥–≤–µ—Å–∫–∞'));
      const bashmakIndex = sortedEquipment.findIndex(e => e.name.toLowerCase().includes('–±–∞—à–º–∞–∫'));
      
      if (hangerIndex !== -1 && bashmakIndex !== -1) {
        const totalElements = sortedEquipment.length - 2; // –±–µ–∑ –±–∞—à–º–∞–∫–∞ –∏ –ø–æ–¥–≤–µ—Å–∫–∏
        const depthRange = bashmakDepth - hangerDepth;
        const step = depthRange / (totalElements + 1);
        const positionFromTop = eqIndex - hangerIndex - 1;
        topDepth = hangerDepth + step * positionFromTop;
      } else {
        topDepth = 0;
      }
    }
    
    // –†–∞—Å—á–µ—Ç –Ω–∏–∂–Ω–µ–π –≥–ª—É–±–∏–Ω—ã (—Ç–æ–ø + –¥–ª–∏–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
    const length = safeParseFloat(eq.length);
    const bottomDepth = topDepth + length;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞–Ω–æ–≤—É—é –≥–ª—É–±–∏–Ω—É –∏ –¥–æ–ø—É—Å–∫
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º plannedDepth, –∑–∞—Ç–µ–º fallback –Ω–∞ interval –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const plannedDepth = safeParseFloat(eq.plannedDepth || eq.interval || 0);
    const tolerance = safeParseFloat(eq.tolerance || 0);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥–ª—É–±–∏–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–æ–≤–æ–π –≥–ª—É–±–∏–Ω—ã –∏ –¥–æ–ø—É—Å–∫–∞
    const minDepth = plannedDepth > 0 ? plannedDepth - tolerance : null;
    const maxDepth = plannedDepth > 0 ? plannedDepth + tolerance : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    let note = "";
    if (plannedDepth > 0 && tolerance > 0) {
      if (bottomDepth < minDepth) {
        note = `–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª–µ–≤–∞—è –≥–ª—É–±–∏–Ω–∞ (${bottomDepth.toFixed(2)} < ${minDepth.toFixed(2)})`;
      } else if (bottomDepth > maxDepth) {
        note = `–ü—Ä–µ–≤—ã—à–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –≥–ª—É–±–∏–Ω–∞ (${bottomDepth.toFixed(2)} > ${maxDepth.toFixed(2)})`;
      } else {
        note = `–í –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å–∫–∞ (${minDepth.toFixed(2)} - ${maxDepth.toFixed(2)})`;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –Ω–∏–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –≥–ª—É–±–∏–Ω—É —Å–∫–≤–∞–∂–∏–Ω—ã
    if (bottomDepth > depth) {
      note = `–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã (${bottomDepth.toFixed(2)} > ${depth.toFixed(2)})`;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä—É–±—ã –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º
    const tubesUsed = [];
    const patrubkiUsed = [];
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ —Ç—Ä—É–±–∞–º–∏
    if (i > 0) {
      const prevElement = results[i - 1];
      const distanceBetween = topDepth - prevElement.bottomDepth;
      
      if (distanceBetween > 0) {
        // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä—É–±—ã
        let remainingDistance = distanceBetween;
        let usedTubeIndices = [];
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç—Ä—É–±–∞–º –∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        for (let j = 0; j < remainingTubes.length && remainingDistance > 0; j++) {
          const tube = remainingTubes[j];
          if (tube.length <= remainingDistance) {
            tubesUsed.push({ ...tube });
            usedTubeIndices.push(j);
            remainingDistance -= tube.length;
          }
        }
        
        // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä—É–±—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        for (let j = usedTubeIndices.length - 1; j >= 0; j--) {
          remainingTubes.splice(usedTubeIndices[j], 1);
        }
        
        // –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–∞—Ç—Ä—É–±–∫–∞–º–∏
        if (remainingDistance > 0) {
          let usedPatrubkiIndices = [];
          
          for (let j = 0; j < remainingPatrubki.length && remainingDistance > 0; j++) {
            const patrubka = remainingPatrubki[j];
            if (patrubka.length <= remainingDistance) {
              patrubkiUsed.push({ ...patrubka });
              usedPatrubkiIndices.push(j);
              remainingDistance -= patrubka.length;
            }
          }
          
          // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ä—É–±–∫–∏
          for (let j = usedPatrubkiIndices.length - 1; j >= 0; j--) {
            remainingPatrubki.splice(usedPatrubkiIndices[j], 1);
          }
        }
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    results.push({
      equipmentName: eq.name,
      topDepth: topDepth,
      bottomDepth: bottomDepth,
      tubesUsed: tubesUsed,
      patrubkiUsed: patrubkiUsed,
      note: note,
      plannedDepth: plannedDepth,
      tolerance: tolerance,
      minDepth: minDepth,
      maxDepth: maxDepth,
      equipmentId: eq.id || i + 1 // –î–æ–±–∞–≤–ª—è–µ–º id –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    });
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç –º–µ–Ω—å—à–µ–π –≥–ª—É–±–∏–Ω—ã (–ø–æ–¥–≤–µ—Å–∫–∞) –∫ –±–æ–ª—å—à–µ–π (–±–∞—à–º–∞–∫)
  results.sort((a, b) => a.topDepth - b.topDepth);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  return results;
}