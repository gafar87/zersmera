// src/utils/calculateMera.js

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –º–µ—Ä—ã —Å–ø—É—Å–∫–∞.
 * 
 * @param {Object} params
 * @param {number} params.depth        - –ì–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã (–º–∞–∫—Å–∏–º—É–º)
 * @param {number} params.shoeDepth    - –ì–ª—É–±–∏–Ω–∞ –±–∞—à–º–∞–∫–∞ (–º–æ–∂–Ω–æ —É—á–µ—Å—Ç—å ¬± –¥–æ–ø—É—Å–∫)
 * @param {number} params.hangerDepth  - –ì–ª—É–±–∏–Ω–∞ –ø–æ–¥–≤–µ—Å–∫–∏ (–≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç), –º–æ–∂–Ω–æ —É—á–µ—Å—Ç—å –¥–æ–ø—É—Å–∫
 * @param {Array}  tubes               - –ú–∞—Å—Å–∏–≤ —Ç—Ä—É–± [{ number, length, row }, ...]
 * @param {Array}  patrubki            - –ú–∞—Å—Å–∏–≤ –ø–∞—Ç—Ä—É–±–∫–æ–≤ [{ number, length, name }, ...]
 * @param {Array}  equipment           - –ú–∞—Å—Å–∏–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è 
 *                                       [{ name, length, interval, tolerance }, ...]
 * 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç:
 *   - equipmentName       (string)
 *   - tubesUsed           (Array<{ number, length }>)
 *   - patrubkiUsed        (Array<{ number, length }>)
 *   - topDepth            (—á–∏—Å–ª–æ)  - –æ—Ç–º–µ—Ç–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
 *   - bottomDepth         (—á–∏—Å–ª–æ)  - –æ—Ç–º–µ—Ç–∫–∞ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ (topDepth + length –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
 *   - note                (string) - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ø–æ–ø–∞–ª–∏ / –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª, –ø—Ä–µ–≤—ã—à–µ–Ω –∑–∞–±–æ–π –∏ —Ç.–¥.
 */
export default function calculateMera(
  params = {}, 
  tubesParam, 
  patrubkiParam, 
  equipmentParam
) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const depth = params.depth || 0;
  const shoeDepth = params.shoeDepth || 0;
  const hangerDepth = params.hangerDepth || 0;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–∏ –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –≤ –æ–±—ä–µ–∫—Ç–µ
  let tubes = tubesParam || params.tubes || [];
  let patrubki = patrubkiParam || params.patrubki || [];
  let equipment = equipmentParam || params.equipment || [];

  console.log('üîß –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á—ë—Ç –º–µ—Ä—ã:');
  console.log('‚Ä¢ –ì–ª—É–±–∏–Ω–∞ —Å–∫–≤–∞–∂–∏–Ω—ã:', depth);
  console.log('‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –±–∞—à–º–∞–∫–∞:', shoeDepth);
  console.log('‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–≤–µ—Å–∫–∏:', hangerDepth, '¬±', equipment[0]?.tolerance);
  console.log('‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–±:', tubes?.length);
  console.log('‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä—É–±–∫–æ–≤:', patrubki?.length);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  if (!tubes || !tubes.length || !equipment || !equipment.length) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ');
    return [];
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ
  const safeParseFloat = (value) => {
    if (typeof value === 'number') return value;
    if (!value) return 0;
    // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const normalized = String(value).replace(',', '.');
    return parseFloat(normalized) || 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –∏–∑ —Ç—Ä—É–±—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
  const getTubeLength = (tube) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª—è —Å –¥–ª–∏–Ω–æ–π —Ç—Ä—É–±—ã
    const length = tube.length || tube['–î–ª–∏–Ω–Ω–∞ —Ç—Ä—É–±—ã, –º'] || tube['–î–ª–∏–Ω–∞ —Ç—Ä—É–±—ã, –º'] || tube['–¥–ª–∏–Ω–∞'] || tube['–î–ª–∏–Ω–∞ (m)'] || 0;
    return safeParseFloat(length);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç—Ä—É–±—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
  const getTubeNumber = (tube, index) => {
    return tube.number || tube['‚Ññ‚Ññ  –ø/–ø'] || tube['–ù–æ–º–µ—Ä —Ç—Ä—É–±—ã'] || tube.row || tube.id || `–¢-${index + 1}`;
  };

  // –ö–æ–ø–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–ª–∏–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã
  let availableTubes = tubes.map((tube, index) => ({
    ...tube,
    number: getTubeNumber(tube, index),
    length: getTubeLength(tube)
  })).filter(tube => tube.length > 0); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç—Ä—É–±—ã —Å –Ω—É–ª–µ–≤–æ–π –¥–ª–∏–Ω–æ–π
  
  let availablePatrubki = [];
  if (patrubki && patrubki.length) {
    availablePatrubki = patrubki.map((pat, index) => ({
      ...pat,
      number: pat.number || pat['‚Ññ‚Ññ  –ø/–ø'] || '–ü-' + (pat.row || index + 1),
      length: getTubeLength(pat)
    })).filter(pat => pat.length > 0); // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø–∞—Ç—Ä—É–±–∫–∏ —Å –Ω—É–ª–µ–≤–æ–π –¥–ª–∏–Ω–æ–π
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä—É–±—ã –ø–æ –Ω–æ–º–µ—Ä—É - —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –æ—Ç 1 –¥–æ N
  availableTubes.sort((a, b) => {
    const numA = parseInt(a.number.toString().replace(/\D/g, '')) || 0;
    const numB = parseInt(b.number.toString().replace(/\D/g, '')) || 0;
    return numA - numB;
  });

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä—É–±–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  let totalTubesLength = 0;
  availableTubes.forEach((tube, index) => {
    if (index < 10) { // –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–æ–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ç—Ä—É–±
      console.log(`üß± –¢—Ä—É–±–∞ ${tube.number}: ${tube.length} –º`);
    }
    totalTubesLength += tube.length;
  });
  console.log(`üß± –í—Å–µ–≥–æ –¥–ª–∏–Ω–∞ —Ç—Ä—É–±: ${totalTubesLength.toFixed(2)} –º (${availableTubes.length} —à—Ç)`);

  // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ç—Ä—É–±–∫–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (availablePatrubki.length > 0) {
    let totalPatrubkiLength = 0;
    availablePatrubki.forEach((pat, index) => {
      if (index < 10) { // –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–æ–≥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –ø–∞—Ç—Ä—É–±–∫–æ–≤
        console.log(`üîß –ü–∞—Ç—Ä—É–±–æ–∫ ${pat.number}: ${pat.length} –º`);
      }
      totalPatrubkiLength += pat.length;
    });
    console.log(`üîß –í—Å–µ–≥–æ –¥–ª–∏–Ω–∞ –ø–∞—Ç—Ä—É–±–∫–æ–≤: ${totalPatrubkiLength.toFixed(2)} –º (${availablePatrubki.length} —à—Ç)`);
  }

  // -------------------------------------------------------------------------
  // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≥–ª—É–±–∏–Ω—ã
  // -------------------------------------------------------------------------
  
  // –ö–æ–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ—Ç –±–æ–ª—å—à–µ–π –≥–ª—É–±–∏–Ω—ã (–±–∞—à–º–∞–∫) –∫ –º–µ–Ω—å—à–µ–π (–ø–æ–¥–≤–µ—Å–∫–∞)
  const sortedEquipment = [...equipment].sort((a, b) => {
    const depthA = safeParseFloat(a.interval);
    const depthB = safeParseFloat(b.interval);
    return depthB - depthA;
  });
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–æ–≤ (–±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ø–æ—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º)
  const results = [];
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç—Ä—É–±—ã (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
  const usedTubes = [];
  
  // –®–∞–≥ 1: –ù–∞—á–∏–Ω–∞–µ–º —Å –±–∞—à–º–∞–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
  const shoe = sortedEquipment.find(eq => eq.name.toLowerCase().includes('–±–∞—à–º–∞–∫'));
  if (!shoe) {
    console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –±–∞—à–º–∞–∫ –≤ —Å–ø–∏—Å–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
    return [];
  }
  
  const shoeDepthTarget = safeParseFloat(shoe.interval);
  const shoeLength = safeParseFloat(shoe.length);
  
  console.log(`üìç –ë–∞—à–º–∞–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≥–ª—É–±–∏–Ω–µ ${shoeDepthTarget} –º`);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞—à–º–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–æ–Ω —Å–∞–º—ã–π –≥–ª—É–±–æ–∫–∏–π)
  results.push({
    equipmentName: shoe.name,
    tubesUsed: [],
    patrubkiUsed: [],
    topDepth: shoeDepthTarget - shoeLength, // –í–µ—Ä—Ö –±–∞—à–º–∞–∫–∞
    bottomDepth: shoeDepthTarget, // –ù–∏–∑ –±–∞—à–º–∞–∫–∞ (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –≥–ª—É–±–∏–Ω–∞)
    note: "–ù–∞—á–∞–ª–æ –æ—Ç—Å—á–µ—Ç–∞ - –±–∞—à–º–∞–∫"
  });
  
  // –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ - –≤–µ—Ä—Ö –±–∞—à–º–∞–∫–∞ (–æ—Ç –Ω–µ–≥–æ –±—É–¥–µ–º –∏–¥—Ç–∏ –≤–≤–µ—Ä—Ö)
  let currentDepth = shoeDepthTarget - shoeLength;
  let tubeCounter = 1; // –°—á—ë—Ç—á–∏–∫ —Ç—Ä—É–±, –Ω–∞—á–∏–Ω–∞—è –æ—Ç –±–∞—à–º–∞–∫–∞
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≥–ª—É–±–∏–Ω—ã
  // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∏—Å–∫–ª—é—á–∞—è –±–∞—à–º–∞–∫, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏
  for (let i = 0; i < sortedEquipment.length; i++) {
    const eq = sortedEquipment[i];
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞—à–º–∞–∫ (–æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω)
    if (eq.name.toLowerCase().includes('–±–∞—à–º–∞–∫')) {
      continue;
    }
    
    const eqName = eq.name;
    const eqLength = safeParseFloat(eq.length);
    const targetDepth = safeParseFloat(eq.interval);
    const tolerance = safeParseFloat(eq.tolerance) || 1;
    
    console.log(`‚öôÔ∏è ${eqName}: —Ü–µ–ª–µ–≤–∞—è –≥–ª—É–±–∏–Ω–∞ ${targetDepth} –º ¬± ${tolerance} –º`);
    console.log(`üìè –¢–µ–∫—É—â–∞—è –≥–ª—É–±–∏–Ω–∞ (–≤–µ—Ä—Ö): ${currentDepth.toFixed(2)} –º, —Ü–µ–ª—å: ${targetDepth} –º`);
    
    // –ù–∞–º –Ω—É–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ –Ω–∏–∑–∞ —ç—Ç–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –≥–ª—É–±–∏–Ω–µ
    // –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä—É–±—ã –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –≥–ª—É–±–∏–Ω–æ–π –∏ —Ü–µ–ª–µ–≤–æ–π –≥–ª—É–±–∏–Ω–æ–π
    const targetBottom = targetDepth;
    const targetTop = targetBottom - eqLength;
    
    // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç—Ä—É–±–∞–º–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –≥–ª—É–±–∏–Ω—ã –¥–æ –≤–µ—Ä—Ö–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const distanceNeeded = currentDepth - targetTop;
    
    console.log(`üëâ –ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤–≤–µ—Ä—Ö: ${distanceNeeded.toFixed(2)} –º —Ç—Ä—É–± –¥–æ –≤–µ—Ä—Ö–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è`);
    
    // –ü–æ–¥–±–∏—Ä–∞–µ–º —Ç—Ä—É–±—ã –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    let tubesForSegment = [];
    let patrubkiForSegment = [];
    let cumulativeTubeLength = 0;
    
    // –ë–µ—Ä–µ–º —Ç—Ä—É–±—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–∞—á–∏–Ω–∞—è —Å —Ç—Ä—É–±—ã ‚Ññ1
    const availableTubesForUse = availableTubes.filter(t => !usedTubes.includes(t.number));
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ç—Ä—É–±—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ tubeCounter, tubeCounter+1, ...
    for (let idx = 0; idx < availableTubesForUse.length && cumulativeTubeLength < distanceNeeded; idx++) {
      const tube = availableTubesForUse[idx];
      
      // –ú–∞—Ä–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–æ–º tubeCounter –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ 
      const numberedTube = {
        ...tube,
        sequentialNumber: tubeCounter++  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–∏
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä—É–±—É
      tubesForSegment.push(numberedTube);
      usedTubes.push(tube.number);
      cumulativeTubeLength += tube.length;
      
      console.log(`+ –¢—Ä—É–±–∞ ‚Ññ${tubeCounter-1} (${tube.number}): ${tube.length} –º (—Å—É–º–º–∞—Ä–Ω–æ: ${cumulativeTubeLength.toFixed(2)} –º)`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –º—ã —Ü–µ–ª–µ–≤—É—é –¥–ª–∏–Ω—É
      if (cumulativeTubeLength > distanceNeeded + tolerance) {
        // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ–¥–µ–ª, –Ω—É–∂–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∞—Ç—Ä—É–±–∫–∞–º–∏
        const excess = cumulativeTubeLength - distanceNeeded;
        console.log(`‚ö†Ô∏è –¢—Ä—É–±—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ, –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ: ${excess.toFixed(2)} –º, –Ω—É–∂–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∞—Ç—Ä—É–±–∫–∞–º–∏`);
        
        // –ü–æ–¥–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ä—É–±–∫–∏ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
        if (availablePatrubki.length > 0) {
          console.log(`üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ç—Ä—É–±–∫–∏ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ ${excess.toFixed(2)} –º`);
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ä—É–±–∫–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ
          const sortedPatrubki = [...availablePatrubki].sort((a, b) => b.length - a.length);
          
          // –ò—â–µ–º –ø–∞—Ç—Ä—É–±–æ–∫, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–∫–∏–π –∫ excess –Ω–æ –º–µ–Ω—å—à–µ –µ–≥–æ
          let bestPatrubokIndex = -1;
          let bestFit = -Infinity;
          
          for (let p = 0; p < sortedPatrubki.length; p++) {
            const patLength = sortedPatrubki[p].length;
            if (patLength <= excess && patLength > bestFit) {
              bestPatrubokIndex = p;
              bestFit = patLength;
            }
          }
          
          if (bestPatrubokIndex !== -1) {
            // –ù–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–∞—Ç—Ä—É–±–æ–∫
            const pat = sortedPatrubki[bestPatrubokIndex];
            patrubkiForSegment.push(pat);
            console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ä—É–±–æ–∫ ${pat.number} –¥–ª–∏–Ω–æ–π ${pat.length} –º`);
            
            // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—Ä—É–±–æ–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
            availablePatrubki = availablePatrubki.filter(p => p.number !== pat.number);
            
            // –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ä—É–±–∫–∏
            const remaining = excess - pat.length;
            if (remaining > 0.1) {
              console.log(`‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –µ—â—ë –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –Ω–∞ ${remaining.toFixed(2)} –º`);
              
              // –ò—â–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ä—É–±–∫–∏
              while (availablePatrubki.length > 0) {
                const nextBestIndex = availablePatrubki.findIndex(p => p.length <= remaining);
                if (nextBestIndex !== -1) {
                  const nextPat = availablePatrubki[nextBestIndex];
                  patrubkiForSegment.push(nextPat);
                  console.log(`+ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ç—Ä—É–±–æ–∫ ${nextPat.number}: ${nextPat.length} –º`);
                  
                  // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ç—Ä—É–±–æ–∫
                  availablePatrubki.splice(nextBestIndex, 1);
                  break;
                } else {
                  // –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ç—Ä—É–±–∫–æ–≤
                  console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ç—Ä—É–±–∫–æ–≤ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏');
                  break;
                }
              }
            }
          } else {
            console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ç—Ä—É–±–∫–æ–≤ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è');
          }
        } else {
          console.log('‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ç—Ä—É–±–∫–æ–≤ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏');
        }
      }
      
      // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∏–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –Ω—É–∂–Ω—É—é –¥–ª–∏–Ω—É, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
      if (cumulativeTubeLength >= distanceNeeded) {
        break;
      }
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –≥–ª—É–±–∏–Ω—É —Å —É—á–µ—Ç–æ–º —Ç—Ä—É–± –∏ –ø–∞—Ç—Ä—É–±–∫–æ–≤
    const totalPatrubkiLength = patrubkiForSegment.reduce((sum, pat) => sum + pat.length, 0);
    const adjustedTubeLength = cumulativeTubeLength - totalPatrubkiLength;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Ç–µ–∫—É—â—É—é –≥–ª—É–±–∏–Ω—É (–≤–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è)
    const actualBottom = currentDepth - adjustedTubeLength;
    const actualTop = actualBottom - eqLength;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –≥–ª—É–±–∏–Ω–µ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä—É–±—ã
    if (tubesForSegment.length > 0) {
      let tubeStartDepth = currentDepth; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –≥–ª—É–±–∏–Ω—ã (–≤–µ—Ä—Ö –±–∞—à–º–∞–∫–∞ –∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
      
      for (let t = 0; t < tubesForSegment.length; t++) {
        // –î–ª—è –ø–µ—Ä–≤–æ–π —Ç—Ä—É–±—ã –ø–æ—Å–ª–µ –±–∞—à–º–∞–∫–∞: startDepth = –≤–µ—Ä—Ö –±–∞—à–º–∞–∫–∞
        tubesForSegment[t].startDepth = tubeStartDepth; 
        // –î–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä—É–±—ã: startDepth = –≤–µ—Ä—Ö —Ç–µ–∫—É—â–µ–π —Ç—Ä—É–±—ã - –µ–µ –¥–ª–∏–Ω–∞
        tubeStartDepth -= tubesForSegment[t].length;
      }
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    let note = "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–±–ª—é–¥–µ–Ω";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª
    const minAllowedDepth = targetDepth - tolerance;
    const maxAllowedDepth = targetDepth + tolerance;
    
    if (actualBottom < minAllowedDepth) {
      note = `–ù–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ (${minAllowedDepth.toFixed(2)} –º)`;
      console.log(`‚ö†Ô∏è ${note}`);
    } else if (actualBottom > maxAllowedDepth) {
      note = `–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ (${maxAllowedDepth.toFixed(2)} –º)`;
      console.log(`‚ö†Ô∏è ${note}`);
    } else {
      console.log(`‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ–±–ª—é–¥–µ–Ω: ${actualBottom.toFixed(2)} –º –ø–æ–ø–∞–¥–∞–µ—Ç –≤ [${minAllowedDepth.toFixed(2)}, ${maxAllowedDepth.toFixed(2)}] –º`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    results.push({
      equipmentName: eqName,
      tubesUsed: tubesForSegment,
      patrubkiUsed: patrubkiForSegment,
      topDepth: actualTop,
      bottomDepth: actualBottom,
      note: note
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≥–ª—É–±–∏–Ω—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
    currentDepth = actualTop;
    
    console.log(`‚úì ${eqName} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –≥–ª—É–±–∏–Ω–µ ${actualBottom.toFixed(2)} –º (–≤–µ—Ä—Ö: ${actualTop.toFixed(2)} –º)`);
    console.log('-----------------------------------');
  }
  
  // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ–±—ã –æ–Ω–∏ —à–ª–∏ –≤ –ø–æ—Ä—è–¥–∫–µ —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
  // (–æ—Ç –ø–æ–¥–≤–µ—Å–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±–ª–∏–∂–µ –∫ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏, –∫ –±–∞—à–º–∞–∫—É, –∫–æ—Ç–æ—Ä—ã–π –≥–ª—É–±–∂–µ –≤—Å–µ—Ö)
  return results.reverse();
}